
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '7B77CFC2E9574BE6AA62E56690011F66'
    
_lr_action_items = {'LBRACE':([0,2,5,6,7,8,26,28,],[3,3,-5,-4,-2,-3,-7,-6,]),'IMPORT':([4,],[10,]),'NUMBER':([9,11,13,14,15,16,18,22,23,24,25,27,29,30,34,37,38,39,40,41,42,43,44,45,49,50,52,53,54,55,57,],[15,-28,15,-26,-27,-9,15,15,15,15,15,-8,-30,15,-13,-11,15,15,-21,15,15,15,-24,-29,-12,-10,-20,-23,-22,-25,-19,]),'LPAREN':([0,2,5,6,7,8,9,11,13,14,15,16,18,19,20,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,52,53,54,55,57,58,],[4,4,-5,-4,-2,-3,12,-28,12,-26,-27,-9,12,32,32,12,12,12,12,-7,-8,-6,-30,12,-15,-17,-13,32,32,-11,12,12,-21,12,12,12,-24,-29,-14,-12,-10,-20,-23,-22,-25,-19,-16,]),'RBRACE':([11,13,14,15,16,27,34,37,40,44,49,50,52,53,54,55,57,],[-28,26,-26,-27,-9,-8,-13,-11,-21,-24,-12,-10,-20,-23,-22,-25,-19,]),'OUTPUT':([12,],[19,]),'INPUT':([12,],[20,]),'ASSIGN':([12,],[21,]),'STRING':([9,11,13,14,15,16,18,22,23,24,25,27,29,30,34,37,38,39,40,41,42,43,44,45,49,50,52,53,54,55,57,],[11,-28,11,-26,-27,-9,11,11,11,11,11,-8,-30,11,-13,-11,11,11,-21,11,11,11,-24,-29,-12,-10,-20,-23,-22,-25,-19,]),'ID':([3,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,57,58,],[9,14,17,-28,22,14,-26,-27,-9,14,33,33,38,14,14,14,14,-8,-30,14,-15,46,-17,-13,33,33,-11,14,14,-21,14,14,14,-24,-29,-18,56,-14,-12,-10,-20,-23,-22,-25,-19,-16,]),'OP_SUB':([12,],[23,]),'OP_MUL':([12,],[18,]),'OP_DIV':([12,],[25,]),'RPAREN':([11,14,15,17,19,20,22,29,30,31,33,34,35,36,37,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[-28,-26,-27,28,34,37,40,-30,44,-15,-17,-13,49,50,-11,52,-21,53,54,55,-24,-29,-14,-12,-10,57,-20,-23,-22,-25,58,-19,-16,]),'OP_ADD':([12,],[24,]),'$end':([1,2,5,6,7,8,26,28,],[0,-1,-5,-4,-2,-3,-7,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'declaration':([19,20,35,36,],[31,31,48,48,]),'type':([32,],[47,]),'parameter_list':([18,22,23,24,25,],[30,39,41,42,43,]),'component':([0,2,],[5,7,]),'declaration_list':([19,20,],[35,36,]),'import_statement':([0,2,],[6,8,]),'expression':([9,13,18,22,23,24,25,30,38,39,41,42,43,],[16,27,29,29,29,29,29,45,51,45,45,45,45,]),'expression_list':([9,],[13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
