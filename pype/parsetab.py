
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '1D0986CF548090149FF07FC136CB2C82'
    
_lr_action_items = {'NUMBER':([7,11,12,13,14,15,19,21,23,24,25,27,29,30,31,33,37,38,39,40,41,43,45,46,48,51,52,53,54,55,56,],[12,12,-27,-26,-28,-9,-8,12,12,12,12,12,12,12,-30,-11,12,12,12,-21,-13,12,-24,-29,-10,-23,-25,-20,-12,-22,-19,]),'OP_MUL':([16,],[21,]),'RPAREN':([12,13,14,17,22,25,26,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,],[-27,-26,-28,28,33,40,41,45,-30,-15,-11,48,-17,51,52,53,-21,-13,54,55,56,-24,-29,-14,-10,-23,-25,-20,-12,-22,-19,58,-16,]),'OP_SUB':([16,],[23,]),'$end':([2,3,4,5,8,9,18,28,],[-1,-5,0,-4,-2,-3,-7,-6,]),'OP_DIV':([16,],[24,]),'OUTPUT':([16,],[26,]),'LBRACE':([0,2,3,5,8,9,18,28,],[1,1,-5,-4,-2,-3,-7,-6,]),'INPUT':([16,],[22,]),'ID':([1,7,10,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,],[7,13,17,13,-27,-26,-28,-9,25,-8,29,13,36,13,13,13,36,13,13,13,-30,-15,-11,36,50,-17,13,13,13,-21,-13,36,13,-24,-29,-14,-10,57,-18,-23,-25,-20,-12,-22,-19,-16,]),'RBRACE':([11,12,13,14,15,19,33,40,41,45,48,51,52,53,54,55,56,],[18,-27,-26,-28,-9,-8,-11,-21,-13,-24,-10,-23,-25,-20,-12,-22,-19,]),'ASSIGN':([16,],[20,]),'STRING':([7,11,12,13,14,15,19,21,23,24,25,27,29,30,31,33,37,38,39,40,41,43,45,46,48,51,52,53,54,55,56,],[14,14,-27,-26,-28,-9,-8,14,14,14,14,14,14,14,-30,-11,14,14,14,-21,-13,14,-24,-29,-10,-23,-25,-20,-12,-22,-19,]),'IMPORT':([6,],[10,]),'LPAREN':([0,2,3,5,7,8,9,11,12,13,14,15,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,45,46,47,48,51,52,53,54,55,56,58,],[6,6,-5,-4,16,-2,-3,16,-27,-26,-28,-9,-7,-8,16,35,16,16,16,35,16,-6,16,16,-30,-15,-11,35,-17,16,16,16,-21,-13,35,16,-24,-29,-14,-10,-23,-25,-20,-12,-22,-19,-16,]),'OP_ADD':([16,],[27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parameter_list':([21,23,24,25,27,],[30,37,38,39,43,]),'declaration':([22,26,34,42,],[32,32,47,47,]),'statement_list':([0,],[2,]),'declaration_list':([22,26,],[34,42,]),'expression':([7,11,21,23,24,25,27,29,30,37,38,39,43,],[15,19,31,31,31,31,31,44,46,46,46,46,46,]),'component':([0,2,],[3,8,]),'type':([35,],[49,]),'expression_list':([7,],[11,]),'program':([0,],[4,]),'import_statement':([0,2,],[5,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
