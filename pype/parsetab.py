
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '76A07D5CF52EC961ECD9BD05F62E0AC8'
    
_lr_action_items = {'OP_MUL':([13,],[18,]),'ASSIGN':([13,],[19,]),'ID':([3,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,58,],[9,11,17,-26,-27,20,11,-9,-28,11,31,11,11,11,36,36,11,-8,-30,11,11,11,-21,11,11,-17,-11,50,36,-15,-13,36,11,-29,-24,-20,-23,-22,-18,57,-10,-14,-12,-25,-19,-16,]),'LPAREN':([0,1,2,6,7,8,9,11,12,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,47,48,49,52,53,54,55,56,58,],[4,-5,4,-4,-2,-3,13,-26,-27,13,-9,-28,13,13,13,13,38,38,13,-8,-7,-6,-30,13,13,13,-21,13,13,-17,-11,38,-15,-13,38,13,-29,-24,-20,-23,-22,-10,-14,-12,-25,-19,-16,]),'NUMBER':([9,11,12,14,15,16,18,20,21,22,25,26,29,30,31,32,33,34,35,37,41,43,44,45,47,48,49,52,54,55,56,],[12,-26,-27,12,-9,-28,12,12,12,12,12,-8,-30,12,12,12,-21,12,12,-11,-13,12,-29,-24,-20,-23,-22,-10,-12,-25,-19,]),'OP_SUB':([13,],[21,]),'IMPORT':([4,],[10,]),'OP_DIV':([13,],[25,]),'RPAREN':([11,12,16,17,20,23,24,29,30,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,],[-26,-27,-28,28,33,37,41,-30,45,47,-21,48,49,-17,-11,52,-15,-13,54,55,-29,-24,56,-20,-23,-22,-10,-14,-12,-25,-19,58,-16,]),'LBRACE':([0,1,2,6,7,8,27,28,],[3,-5,3,-4,-2,-3,-7,-6,]),'OP_ADD':([13,],[22,]),'INPUT':([13,],[23,]),'STRING':([9,11,12,14,15,16,18,20,21,22,25,26,29,30,31,32,33,34,35,37,41,43,44,45,47,48,49,52,54,55,56,],[16,-26,-27,16,-9,-28,16,16,16,16,16,-8,-30,16,16,16,-21,16,16,-11,-13,16,-29,-24,-20,-23,-22,-10,-12,-25,-19,]),'$end':([1,2,5,6,7,8,27,28,],[-5,-1,0,-4,-2,-3,-7,-6,]),'OUTPUT':([13,],[24,]),'RBRACE':([11,12,14,15,16,26,33,37,41,45,47,48,49,52,54,55,56,],[-26,-27,27,-9,-28,-8,-21,-11,-13,-24,-20,-23,-22,-10,-12,-25,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'component':([0,2,],[1,7,]),'expression':([9,14,18,20,21,22,25,30,31,32,34,35,43,],[15,26,29,29,29,29,29,44,46,44,44,44,44,]),'statement_list':([0,],[2,]),'declaration':([23,24,39,42,],[40,40,53,53,]),'program':([0,],[5,]),'type':([38,],[51,]),'declaration_list':([23,24,],[39,42,]),'import_statement':([0,2,],[6,8,]),'parameter_list':([18,20,21,22,25,],[30,32,34,35,43,]),'expression_list':([9,],[14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
