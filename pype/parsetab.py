
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '674B03BF23F0780B988AC9F0B7D3EDAD'
    
_lr_action_items = {'RBRACE':([11,12,13,15,16,27,31,37,38,45,49,50,51,53,54,55,57,],[-9,-28,-26,-27,26,-8,-11,-21,-13,-10,-23,-20,-12,-25,-22,-24,-19,]),'STRING':([7,11,12,13,15,16,19,20,23,24,25,27,31,34,35,36,37,38,40,41,42,43,45,48,49,50,51,53,54,55,57,],[12,-9,-28,-26,-27,12,12,12,12,12,12,-8,-11,12,-30,12,-21,-13,12,12,12,12,-10,-29,-23,-20,-12,-25,-22,-24,-19,]),'OP_SUB':([14,],[19,]),'$end':([1,3,4,5,8,9,26,28,],[0,-1,-4,-5,-3,-2,-7,-6,]),'IMPORT':([6,],[10,]),'RPAREN':([12,13,15,17,18,20,21,29,30,31,32,34,35,36,37,38,39,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[-28,-26,-27,28,31,37,38,-15,-17,-11,45,49,-30,50,-21,-13,51,53,54,55,-14,-10,-29,-23,-20,-12,57,-25,-22,-24,58,-19,-16,]),'LBRACE':([0,3,4,5,8,9,26,28,],[2,2,-4,-5,-3,-2,-7,-6,]),'LPAREN':([0,3,4,5,7,8,9,11,12,13,15,16,18,19,20,21,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,53,54,55,57,58,],[6,6,-4,-5,14,-3,-2,-9,-28,-26,-27,14,33,14,14,33,14,14,14,-7,-8,-6,-15,-17,-11,33,14,-30,14,-21,-13,33,14,14,14,14,-14,-10,-29,-23,-20,-12,-25,-22,-24,-19,-16,]),'OUTPUT':([14,],[21,]),'ASSIGN':([14,],[22,]),'ID':([2,7,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,58,],[7,13,17,-9,-28,-26,20,-27,13,30,13,13,30,40,13,13,13,-8,-15,-17,-11,30,46,13,-30,13,-21,-13,30,13,13,13,13,-14,-10,-18,56,-29,-23,-20,-12,-25,-22,-24,-19,-16,]),'OP_DIV':([14,],[23,]),'INPUT':([14,],[18,]),'OP_ADD':([14,],[24,]),'OP_MUL':([14,],[25,]),'NUMBER':([7,11,12,13,15,16,19,20,23,24,25,27,31,34,35,36,37,38,40,41,42,43,45,48,49,50,51,53,54,55,57,],[15,-9,-28,-26,-27,15,15,15,15,15,15,-8,-11,15,-30,15,-21,-13,15,15,15,15,-10,-29,-23,-20,-12,-25,-22,-24,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([18,21,32,39,],[29,29,44,44,]),'parameter_list':([19,20,23,24,25,],[34,36,41,42,43,]),'expression':([7,16,19,20,23,24,25,34,36,40,41,42,43,],[11,27,35,35,35,35,35,48,48,52,48,48,48,]),'type':([33,],[47,]),'program':([0,],[1,]),'statement_list':([0,],[3,]),'expression_list':([7,],[16,]),'declaration_list':([18,21,],[32,39,]),'component':([0,3,],[5,9,]),'import_statement':([0,3,],[4,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
