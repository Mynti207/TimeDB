
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '6A65CD8BFBEB79DCE9C7C577BDAF4664'
    
_lr_action_items = {'ID':([3,7,8,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,57,58,],[8,11,12,-26,-27,19,-28,-9,12,12,12,12,12,35,40,12,35,-8,-21,-30,12,12,12,12,-17,-13,35,-15,51,12,12,-11,35,-20,-29,-22,-23,-25,-12,-14,-18,56,-24,-10,-19,-16,]),'OP_SUB':([14,],[21,]),'RPAREN':([11,12,13,15,19,23,26,29,30,31,32,33,34,35,36,37,38,41,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,],[18,-26,-27,-28,29,36,42,-21,-30,44,46,47,48,-17,-13,49,-15,54,-11,55,-20,-29,-22,-23,-25,-12,-14,57,-24,-10,58,-19,-16,]),'INPUT':([14,],[26,]),'LBRACE':([0,2,4,5,9,10,18,28,],[3,-5,3,-4,-2,-3,-6,-7,]),'LPAREN':([0,2,4,5,8,9,10,12,13,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,54,55,57,58,],[1,-5,1,-4,14,-2,-3,-26,-27,-28,-9,14,-6,14,14,14,14,39,14,39,-8,-7,-21,-30,14,14,14,14,-17,-13,39,-15,14,14,-11,39,-20,-29,-22,-23,-25,-12,-14,-24,-10,-19,-16,]),'OP_DIV':([14,],[22,]),'STRING':([8,12,13,15,16,17,19,20,21,22,25,27,29,30,31,32,33,34,36,40,41,42,44,45,46,47,48,49,54,55,57,],[15,-26,-27,-28,-9,15,15,15,15,15,15,-8,-21,-30,15,15,15,15,-13,15,15,-11,-20,-29,-22,-23,-25,-12,-24,-10,-19,]),'IMPORT':([1,],[7,]),'OUTPUT':([14,],[23,]),'$end':([2,4,5,6,9,10,18,28,],[-5,-1,-4,0,-2,-3,-6,-7,]),'OP_ADD':([14,],[20,]),'ASSIGN':([14,],[24,]),'OP_MUL':([14,],[25,]),'NUMBER':([8,12,13,15,16,17,19,20,21,22,25,27,29,30,31,32,33,34,36,40,41,42,44,45,46,47,48,49,54,55,57,],[13,-26,-27,-28,-9,13,13,13,13,13,13,-8,-21,-30,13,13,13,13,-13,13,13,-11,-20,-29,-22,-23,-25,-12,-24,-10,-19,]),'RBRACE':([12,13,15,16,17,27,29,36,42,44,46,47,48,49,54,55,57,],[-26,-27,-28,-9,28,-8,-21,-13,-11,-20,-22,-23,-25,-12,-24,-10,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration_list':([23,26,],[37,43,]),'expression':([8,17,19,20,21,22,25,31,32,33,34,40,41,],[16,27,30,30,30,30,30,45,45,45,45,53,45,]),'type':([39,],[52,]),'expression_list':([8,],[17,]),'parameter_list':([19,20,21,22,25,],[31,32,33,34,41,]),'component':([0,4,],[2,9,]),'declaration':([23,26,37,43,],[38,38,50,50,]),'statement_list':([0,],[4,]),'import_statement':([0,4,],[5,10,]),'program':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
