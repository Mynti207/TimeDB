
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '674B03BF23F0780B988AC9F0B7D3EDAD'
    
_lr_action_items = {'INPUT':([16,],[20,]),'STRING':([9,11,12,13,14,15,18,22,23,24,25,27,29,34,35,36,37,38,39,40,41,43,46,49,50,51,52,53,54,55,57,],[13,-9,-26,-28,-27,13,-8,13,13,13,13,13,-11,13,-30,13,13,13,-21,13,-13,13,-10,-29,-25,-24,-20,-23,-12,-22,-19,]),'ASSIGN':([16,],[21,]),'IMPORT':([4,],[10,]),'LBRACE':([0,2,5,6,7,8,19,28,],[3,3,-4,-5,-3,-2,-7,-6,]),'OP_DIV':([16,],[22,]),'OP_SUB':([16,],[25,]),'OP_MUL':([16,],[23,]),'RPAREN':([12,13,14,17,20,24,26,29,30,31,33,35,36,37,38,39,40,41,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,],[-26,-28,-27,28,29,39,41,-11,-17,-15,46,-30,50,51,52,-21,53,-13,54,55,-10,-14,57,-29,-25,-24,-20,-23,-12,-22,58,-19,-16,]),'ID':([3,9,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,57,58,],[9,12,17,-9,-26,-28,-27,12,24,-8,30,34,12,12,12,12,30,12,-11,-17,-15,44,30,12,-30,12,12,12,-21,12,-13,30,12,-18,56,-10,-14,-29,-25,-24,-20,-23,-12,-22,-19,-16,]),'RBRACE':([11,12,13,14,15,18,29,39,41,46,50,51,52,53,54,55,57,],[-9,-26,-28,-27,19,-8,-11,-21,-13,-10,-25,-24,-20,-23,-12,-22,-19,]),'OUTPUT':([16,],[26,]),'$end':([1,2,5,6,7,8,19,28,],[0,-1,-4,-5,-3,-2,-7,-6,]),'NUMBER':([9,11,12,13,14,15,18,22,23,24,25,27,29,34,35,36,37,38,39,40,41,43,46,49,50,51,52,53,54,55,57,],[14,-9,-26,-28,-27,14,-8,14,14,14,14,14,-11,14,-30,14,14,14,-21,14,-13,14,-10,-29,-25,-24,-20,-23,-12,-22,-19,]),'LPAREN':([0,2,5,6,7,8,9,11,12,13,14,15,18,19,20,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,46,47,49,50,51,52,53,54,55,57,58,],[4,4,-4,-5,-3,-2,16,-9,-26,-28,-27,16,-8,-7,32,16,16,16,16,32,16,-6,-11,-17,-15,32,16,-30,16,16,16,-21,16,-13,32,16,-10,-14,-29,-25,-24,-20,-23,-12,-22,-19,-16,]),'OP_ADD':([16,],[27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([9,15,22,23,24,25,27,34,36,37,38,40,43,],[11,18,35,35,35,35,35,48,49,49,49,49,49,]),'program':([0,],[1,]),'declaration':([20,26,33,42,],[31,31,47,47,]),'type':([32,],[45,]),'expression_list':([9,],[15,]),'statement_list':([0,],[2,]),'parameter_list':([22,23,24,25,27,],[36,37,38,40,43,]),'import_statement':([0,2,],[5,7,]),'declaration_list':([20,26,],[33,42,]),'component':([0,2,],[6,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
