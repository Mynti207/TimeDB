
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '674B03BF23F0780B988AC9F0B7D3EDAD'
    
_lr_action_items = {'INPUT':([11,],[18,]),'LPAREN':([0,4,5,6,7,9,10,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,49,50,51,52,53,54,55,57,58,],[3,-4,-5,3,11,-3,-2,-27,-26,-9,-28,11,29,29,11,11,11,11,11,-8,-7,-6,-15,-17,29,-11,11,29,-13,-30,11,11,11,-21,11,11,-14,-10,-12,-29,-24,-22,-23,-20,-25,-19,-16,]),'ASSIGN':([11,],[19,]),'NUMBER':([7,12,13,14,15,16,21,22,23,24,25,26,33,34,36,37,38,39,40,41,42,43,47,49,50,51,52,53,54,55,57,],[12,-27,-26,-9,-28,12,12,12,12,12,12,-8,-11,12,-13,-30,12,12,12,-21,12,12,-10,-12,-29,-24,-22,-23,-20,-25,-19,]),'STRING':([7,12,13,14,15,16,21,22,23,24,25,26,33,34,36,37,38,39,40,41,42,43,47,49,50,51,52,53,54,55,57,],[15,-27,-26,-9,-28,15,15,15,15,15,15,-8,-11,15,-13,-30,15,15,15,-21,15,15,-10,-12,-29,-24,-22,-23,-20,-25,-19,]),'ID':([1,7,8,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,57,58,],[7,13,17,24,-27,-26,-9,-28,13,31,34,31,13,13,13,13,13,-8,44,-15,-17,31,-11,13,31,-13,-30,13,13,13,-21,13,13,-18,56,-14,-10,-12,-29,-24,-22,-23,-20,-25,-19,-16,]),'RPAREN':([12,13,15,17,18,20,24,30,31,32,33,35,36,37,38,39,40,41,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,],[-27,-26,-28,28,33,36,41,-15,-17,47,-11,49,-13,-30,51,52,53,-21,54,55,-14,-10,57,-12,-29,-24,-22,-23,-20,-25,58,-19,-16,]),'IMPORT':([3,],[8,]),'OP_MUL':([11,],[21,]),'OUTPUT':([11,],[20,]),'$end':([2,4,5,6,9,10,27,28,],[0,-4,-5,-1,-3,-2,-7,-6,]),'OP_ADD':([11,],[22,]),'OP_SUB':([11,],[23,]),'LBRACE':([0,4,5,6,9,10,27,28,],[1,-4,-5,1,-3,-2,-7,-6,]),'OP_DIV':([11,],[25,]),'RBRACE':([12,13,14,15,16,26,33,36,41,47,49,51,52,53,54,55,57,],[-27,-26,-9,-28,27,-8,-11,-13,-21,-10,-12,-24,-22,-23,-20,-25,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parameter_list':([21,22,23,24,25,],[38,39,40,42,43,]),'type':([29,],[45,]),'expression_list':([7,],[16,]),'program':([0,],[2,]),'import_statement':([0,6,],[4,9,]),'component':([0,6,],[5,10,]),'expression':([7,16,21,22,23,24,25,34,38,39,40,42,43,],[14,26,37,37,37,37,37,48,50,50,50,50,50,]),'declaration_list':([18,20,],[32,35,]),'declaration':([18,20,32,35,],[30,30,46,46,]),'statement_list':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
