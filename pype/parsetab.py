
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '76A07D5CF52EC961ECD9BD05F62E0AC8'
    
_lr_action_items = {'OP_MUL':([13,],[19,]),'LBRACE':([0,1,5,6,9,10,18,27,],[3,-5,-4,3,-2,-3,-6,-7,]),'ID':([3,7,8,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,58,],[8,11,12,-26,20,-27,-9,12,-28,12,12,12,34,39,12,12,34,-8,12,-30,12,-21,12,-17,49,34,-11,-15,12,12,12,34,-13,-24,-29,-20,-22,56,-18,-10,-14,-23,-25,-12,-19,-16,]),'LPAREN':([0,1,5,6,8,9,10,12,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,50,51,53,54,55,57,58,],[2,-5,-4,2,13,-2,-3,-26,-27,-9,13,-28,-6,13,13,13,35,13,13,35,-7,-8,13,-30,13,-21,13,-17,35,-11,-15,13,13,13,35,-13,-24,-29,-20,-22,-10,-14,-23,-25,-12,-19,-16,]),'NUMBER':([8,12,14,15,16,17,19,20,21,24,25,28,29,30,31,32,33,37,39,40,41,43,44,45,46,47,50,53,54,55,57,],[14,-26,-27,-9,14,-28,14,14,14,14,14,-8,14,-30,14,-21,14,-11,14,14,14,-13,-24,-29,-20,-22,-10,-23,-25,-12,-19,]),'STRING':([8,12,14,15,16,17,19,20,21,24,25,28,29,30,31,32,33,37,39,40,41,43,44,45,46,47,50,53,54,55,57,],[17,-26,-27,-9,17,-28,17,17,17,17,17,-8,17,-30,17,-21,17,-11,17,17,17,-13,-24,-29,-20,-22,-10,-23,-25,-12,-19,]),'RPAREN':([11,12,14,17,20,22,26,29,30,31,32,33,34,36,37,38,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,],[18,-26,-27,-28,32,37,43,44,-30,46,-21,47,-17,50,-11,-15,53,54,55,-13,-24,-29,-20,-22,-10,-14,57,-23,-25,-12,58,-19,-16,]),'OP_ADD':([13,],[21,]),'INPUT':([13,],[22,]),'ASSIGN':([13,],[23,]),'IMPORT':([2,],[7,]),'$end':([1,4,5,6,9,10,18,27,],[-5,0,-4,-1,-2,-3,-6,-7,]),'OP_SUB':([13,],[24,]),'OP_DIV':([13,],[25,]),'OUTPUT':([13,],[26,]),'RBRACE':([12,14,15,16,17,28,32,37,43,44,46,47,50,53,54,55,57,],[-26,-27,-9,27,-28,-8,-21,-11,-13,-24,-20,-22,-10,-23,-25,-12,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration_list':([22,26,],[36,42,]),'component':([0,6,],[1,9,]),'type':([35,],[48,]),'program':([0,],[4,]),'parameter_list':([19,20,21,24,25,],[29,31,33,40,41,]),'expression':([8,16,19,20,21,24,25,29,31,33,39,40,41,],[15,28,30,30,30,30,30,45,45,45,52,45,45,]),'import_statement':([0,6,],[5,10,]),'statement_list':([0,],[6,]),'declaration':([22,26,36,42,],[38,38,51,51,]),'expression_list':([8,],[16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
