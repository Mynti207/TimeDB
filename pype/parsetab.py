
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '6A65CD8BFBEB79DCE9C7C577BDAF4664'
    
_lr_action_items = {'INPUT':([13,],[23,]),'LBRACE':([0,1,5,6,9,10,26,28,],[2,-5,2,-4,-2,-3,-7,-6,]),'ID':([2,7,8,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,58,],[7,12,17,-28,-26,18,12,-9,-27,12,32,12,35,12,35,12,12,-8,-21,12,-30,12,12,35,-17,-13,-15,50,12,35,-11,12,12,-20,-29,-22,-12,-14,-18,57,-24,-10,-23,-25,-19,-16,]),'OP_ADD':([13,],[20,]),'LPAREN':([0,1,5,6,7,9,10,11,12,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,47,48,49,52,53,54,55,56,58,],[4,-5,4,-4,13,-2,-3,-28,-26,13,-9,-27,13,13,38,13,38,13,13,-7,-8,-6,-21,13,-30,13,13,38,-17,-13,-15,13,38,-11,13,13,-20,-29,-22,-12,-14,-24,-10,-23,-25,-19,-16,]),'RPAREN':([11,12,16,17,18,21,23,29,30,31,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,],[-28,-26,-27,28,29,36,41,-21,44,-30,47,48,-17,-13,-15,52,53,-11,54,55,-20,-29,56,-22,-12,-14,-24,-10,-23,-25,-19,58,-16,]),'ASSIGN':([13,],[19,]),'$end':([1,3,5,6,9,10,26,28,],[-5,0,-1,-4,-2,-3,-7,-6,]),'RBRACE':([11,12,14,15,16,27,29,36,41,44,47,48,52,53,54,55,56,],[-28,-26,26,-9,-27,-8,-21,-13,-11,-20,-22,-12,-24,-10,-23,-25,-19,]),'IMPORT':([4,],[8,]),'OUTPUT':([13,],[21,]),'NUMBER':([7,11,12,14,15,16,18,20,22,24,25,27,29,30,31,32,33,36,39,41,42,43,44,45,47,48,52,53,54,55,56,],[16,-28,-26,16,-9,-27,16,16,16,16,16,-8,-21,16,-30,16,16,-13,16,-11,16,16,-20,-29,-22,-12,-24,-10,-23,-25,-19,]),'OP_MUL':([13,],[22,]),'STRING':([7,11,12,14,15,16,18,20,22,24,25,27,29,30,31,32,33,36,39,41,42,43,44,45,47,48,52,53,54,55,56,],[11,-28,-26,11,-9,-27,11,11,11,11,11,-8,-21,11,-30,11,11,-13,11,-11,11,11,-20,-29,-22,-12,-24,-10,-23,-25,-19,]),'OP_SUB':([13,],[24,]),'OP_DIV':([13,],[25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration_list':([21,23,],[34,40,]),'component':([0,5,],[1,9,]),'declaration':([21,23,34,40,],[37,37,49,49,]),'expression':([7,14,18,20,22,24,25,30,32,33,39,42,43,],[15,27,31,31,31,31,31,45,46,45,45,45,45,]),'program':([0,],[3,]),'type':([38,],[51,]),'statement_list':([0,],[5,]),'expression_list':([7,],[14,]),'import_statement':([0,5,],[6,10,]),'parameter_list':([18,20,22,24,25,],[30,33,39,42,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
