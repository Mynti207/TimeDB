
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '6A65CD8BFBEB79DCE9C7C577BDAF4664'
    
_lr_action_items = {'STRING':([9,11,12,13,14,15,19,20,22,24,25,27,29,30,31,36,37,39,40,41,42,43,44,45,47,50,51,52,53,55,57,],[11,-28,11,-26,-27,-9,-8,11,11,11,11,11,-21,-30,11,-13,11,-11,11,11,11,11,-20,-29,-12,-24,-10,-25,-22,-23,-19,]),'ID':([5,9,10,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,],[9,13,17,-28,13,-26,-27,-9,20,-8,13,32,13,32,13,13,42,13,-21,-30,13,-17,32,-15,48,-13,13,32,-11,13,13,13,13,-20,-29,-14,-12,-18,56,-24,-10,-25,-22,-23,-19,-16,]),'$end':([1,2,3,4,7,8,18,28,],[-1,0,-5,-4,-2,-3,-7,-6,]),'OUTPUT':([16,],[21,]),'OP_MUL':([16,],[22,]),'INPUT':([16,],[23,]),'OP_DIV':([16,],[24,]),'RPAREN':([11,13,14,17,20,21,23,29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,50,51,52,53,54,55,56,57,58,],[-28,-26,-27,28,29,36,39,-21,-30,44,-17,47,-15,-13,50,51,-11,52,53,55,-20,-29,-14,-12,-24,-10,-25,-22,57,-23,58,-19,-16,]),'OP_ADD':([16,],[25,]),'LBRACE':([0,1,3,4,7,8,18,28,],[5,5,-5,-4,-2,-3,-7,-6,]),'ASSIGN':([16,],[26,]),'RBRACE':([11,12,13,14,15,19,29,36,39,44,47,50,51,52,53,55,57,],[-28,18,-26,-27,-9,-8,-21,-13,-11,-20,-12,-24,-10,-25,-22,-23,-19,]),'NUMBER':([9,11,12,13,14,15,19,20,22,24,25,27,29,30,31,36,37,39,40,41,42,43,44,45,47,50,51,52,53,55,57,],[14,-28,14,-26,-27,-9,-8,14,14,14,14,14,-21,-30,14,-13,14,-11,14,14,14,14,-20,-29,-12,-24,-10,-25,-22,-23,-19,]),'IMPORT':([6,],[10,]),'OP_SUB':([16,],[27,]),'LPAREN':([0,1,3,4,7,8,9,11,12,13,14,15,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,50,51,52,53,55,57,58,],[6,6,-5,-4,-2,-3,16,-28,16,-26,-27,-9,-7,-8,16,35,16,35,16,16,16,-6,-21,-30,16,-17,35,-15,-13,16,35,-11,16,16,16,16,-20,-29,-14,-12,-24,-10,-25,-22,-23,-19,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([21,23,33,38,],[34,34,46,46,]),'expression_list':([9,],[12,]),'program':([0,],[2,]),'declaration_list':([21,23,],[33,38,]),'component':([0,1,],[3,7,]),'statement_list':([0,],[1,]),'parameter_list':([20,22,24,25,27,],[31,37,40,41,43,]),'expression':([9,12,20,22,24,25,27,31,37,40,41,42,43,],[15,19,30,30,30,30,30,45,45,45,45,54,45,]),'type':([35,],[49,]),'import_statement':([0,1,],[4,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
