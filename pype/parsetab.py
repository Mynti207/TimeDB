
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '7B77CFC2E9574BE6AA62E56690011F66'
    
_lr_action_items = {'ID':([3,7,8,12,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,],[8,11,12,-26,12,23,-27,-28,-9,-8,29,12,12,12,12,37,12,37,12,12,-30,-21,12,12,12,-15,-17,-11,50,37,12,-13,37,-25,-29,-20,-22,-23,-18,57,-14,-10,-24,-12,-19,-16,]),'RPAREN':([11,12,15,16,23,26,28,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,],[18,-26,-27,-28,32,38,42,45,-30,-21,47,48,49,-15,-17,-11,53,54,-13,55,56,-25,-29,-20,-22,-23,-14,-10,-24,-12,-19,58,-16,]),'LPAREN':([0,4,5,6,8,9,10,12,13,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,45,46,47,48,49,52,53,54,55,56,58,],[2,-4,-5,2,14,-3,-2,-26,14,-27,-28,-9,-6,-7,-8,14,14,14,14,39,14,39,14,14,-30,-21,14,14,14,-15,-17,-11,39,14,-13,39,-25,-29,-20,-22,-23,-14,-10,-24,-12,-19,-16,]),'OP_DIV':([14,],[22,]),'NUMBER':([8,12,13,15,16,17,20,22,23,24,25,27,29,30,31,32,33,34,35,38,41,42,45,46,47,48,49,53,54,55,56,],[15,-26,15,-27,-28,-9,-8,15,15,15,15,15,15,15,-30,-21,15,15,15,-11,15,-13,-25,-29,-20,-22,-23,-10,-24,-12,-19,]),'ASSIGN':([14,],[21,]),'OP_ADD':([14,],[24,]),'IMPORT':([2,],[7,]),'STRING':([8,12,13,15,16,17,20,22,23,24,25,27,29,30,31,32,33,34,35,38,41,42,45,46,47,48,49,53,54,55,56,],[16,-26,16,-27,-28,-9,-8,16,16,16,16,16,16,16,-30,-21,16,16,16,-11,16,-13,-25,-29,-20,-22,-23,-10,-24,-12,-19,]),'RBRACE':([12,13,15,16,17,20,32,38,42,45,47,48,49,53,54,55,56,],[-26,19,-27,-28,-9,-8,-21,-11,-13,-25,-20,-22,-23,-10,-24,-12,-19,]),'OP_SUB':([14,],[25,]),'INPUT':([14,],[26,]),'LBRACE':([0,4,5,6,9,10,18,19,],[3,-4,-5,3,-3,-2,-6,-7,]),'OP_MUL':([14,],[27,]),'OUTPUT':([14,],[28,]),'$end':([1,4,5,6,9,10,18,19,],[0,-4,-5,-1,-3,-2,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration':([26,28,40,43,],[36,36,52,52,]),'parameter_list':([22,23,24,25,27,],[30,33,34,35,41,]),'type':([39,],[51,]),'expression_list':([8,],[13,]),'expression':([8,13,22,23,24,25,27,29,30,33,34,35,41,],[17,20,31,31,31,31,31,44,46,46,46,46,46,]),'import_statement':([0,6,],[4,9,]),'declaration_list':([26,28,],[40,43,]),'component':([0,6,],[5,10,]),'statement_list':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
