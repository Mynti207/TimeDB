
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D1728DD5C674C28D5C94CF9231A47147'
    
_lr_action_items = {'LBRACE':([0,1,3,6,7,8,19,28,],[4,-5,4,-4,-2,-3,-7,-6,]),'OP_DIV':([14,],[20,]),'NUMBER':([9,11,12,13,15,16,18,20,21,22,23,26,29,30,31,32,33,34,39,41,42,43,44,45,46,47,48,51,53,54,57,],[12,-28,-27,12,-9,-26,-8,12,12,12,12,12,12,-30,12,12,12,-11,-13,-21,12,12,-25,-29,-24,-22,-23,-10,-12,-20,-19,]),'OP_MUL':([14,],[21,]),'OP_ADD':([14,],[22,]),'LPAREN':([0,1,3,6,7,8,9,11,12,13,15,16,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,54,57,58,],[5,-5,5,-4,-2,-3,14,-28,-27,14,-9,-26,-8,-7,14,14,14,14,36,36,14,-6,14,-30,14,14,14,-11,-15,-17,36,-13,36,-21,14,14,-25,-29,-24,-22,-23,-10,-14,-12,-20,-19,-16,]),'RPAREN':([11,12,16,17,24,25,26,29,30,31,32,33,34,35,37,38,39,40,41,42,44,45,46,47,48,51,52,53,54,55,56,57,58,],[-28,-27,-26,28,34,39,41,44,-30,46,47,48,-11,-15,-17,51,-13,53,-21,54,-25,-29,-24,-22,-23,-10,-14,-12,-20,57,58,-19,-16,]),'STRING':([9,11,12,13,15,16,18,20,21,22,23,26,29,30,31,32,33,34,39,41,42,43,44,45,46,47,48,51,53,54,57,],[11,-28,-27,11,-9,-26,-8,11,11,11,11,11,11,-30,11,11,11,-11,-13,-21,11,11,-25,-29,-24,-22,-23,-10,-12,-20,-19,]),'INPUT':([14,],[24,]),'IMPORT':([5,],[10,]),'RBRACE':([11,12,13,15,16,18,34,39,41,44,46,47,48,51,53,54,57,],[-28,-27,19,-9,-26,-8,-11,-13,-21,-25,-24,-22,-23,-10,-12,-20,-19,]),'OP_SUB':([14,],[23,]),'OUTPUT':([14,],[25,]),'$end':([1,2,3,6,7,8,19,28,],[-5,0,-1,-4,-2,-3,-7,-6,]),'ID':([4,9,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,],[9,16,17,-28,-27,16,26,-9,-26,-8,16,16,16,16,37,37,16,43,16,-30,16,16,16,-11,-15,49,-17,37,-13,37,-21,16,16,-25,-29,-24,-22,-23,-18,56,-10,-14,-12,-20,-19,-16,]),'ASSIGN':([14,],[27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_list':([9,],[13,]),'component':([0,3,],[1,7,]),'program':([0,],[2,]),'declaration':([24,25,38,40,],[35,35,52,52,]),'statement_list':([0,],[3,]),'expression':([9,13,20,21,22,23,26,29,31,32,33,42,43,],[15,18,30,30,30,30,30,45,45,45,45,45,55,]),'type':([36,],[50,]),'declaration_list':([24,25,],[38,40,]),'import_statement':([0,3,],[6,8,]),'parameter_list':([20,21,22,23,26,],[29,31,32,33,42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
