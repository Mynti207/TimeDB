
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D1728DD5C674C28D5C94CF9231A47147'
    
_lr_action_items = {'INPUT':([14,],[21,]),'OUTPUT':([14,],[22,]),'STRING':([8,12,13,15,16,17,20,23,24,25,26,28,33,35,36,37,38,39,40,41,42,43,47,48,49,50,51,52,53,55,57,],[13,13,-28,-27,-9,-26,-8,13,13,13,13,13,-11,-13,13,-30,13,13,-21,13,13,13,-10,-12,-23,-29,-22,-24,-20,-25,-19,]),'OP_ADD':([14,],[24,]),'RBRACE':([12,13,15,16,17,20,33,35,40,47,48,49,51,52,53,55,57,],[19,-28,-27,-9,-26,-8,-11,-13,-21,-10,-12,-23,-22,-24,-20,-25,-19,]),'RPAREN':([11,13,15,17,21,22,26,29,31,32,33,34,35,36,37,38,39,40,41,43,46,47,48,49,50,51,52,53,54,55,56,57,58,],[18,-28,-27,-26,33,35,40,-15,47,-17,-11,48,-13,49,-30,51,52,-21,53,55,-14,-10,-12,-23,-29,-22,-24,-20,57,-25,58,-19,-16,]),'$end':([3,4,5,6,9,10,18,19,],[-4,0,-1,-5,-3,-2,-6,-7,]),'IMPORT':([1,],[7,]),'OP_MUL':([14,],[25,]),'LPAREN':([0,3,5,6,8,9,10,12,13,15,16,17,18,19,20,21,22,23,24,25,26,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,49,50,51,52,53,55,57,58,],[1,-4,1,-5,14,-3,-2,14,-28,-27,-9,-26,-6,-7,-8,30,30,14,14,14,14,14,-15,30,-17,-11,30,-13,14,-30,14,14,-21,14,14,14,-14,-10,-12,-23,-29,-22,-24,-20,-25,-19,-16,]),'NUMBER':([8,12,13,15,16,17,20,23,24,25,26,28,33,35,36,37,38,39,40,41,42,43,47,48,49,50,51,52,53,55,57,],[15,15,-28,-27,-9,-26,-8,15,15,15,15,15,-11,-13,15,-30,15,15,-21,15,15,15,-10,-12,-23,-29,-22,-24,-20,-25,-19,]),'LBRACE':([0,3,5,6,9,10,18,19,],[2,-4,2,-5,-3,-2,-6,-7,]),'ID':([2,7,8,12,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,],[8,11,17,17,-28,26,-27,-9,-26,-8,32,32,17,17,17,17,42,17,-15,45,32,-17,-11,32,-13,17,-30,17,17,-21,17,17,17,56,-18,-14,-10,-12,-23,-29,-22,-24,-20,-25,-19,-16,]),'OP_DIV':([14,],[28,]),'ASSIGN':([14,],[27,]),'OP_SUB':([14,],[23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'type':([30,],[44,]),'expression_list':([8,],[12,]),'declaration_list':([21,22,],[31,34,]),'import_statement':([0,5,],[3,9,]),'expression':([8,12,23,24,25,26,28,36,38,39,41,42,43,],[16,20,37,37,37,37,37,50,50,50,50,54,50,]),'parameter_list':([23,24,25,26,28,],[36,38,39,41,43,]),'program':([0,],[4,]),'statement_list':([0,],[5,]),'declaration':([21,22,31,34,],[29,29,46,46,]),'component':([0,5,],[6,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
