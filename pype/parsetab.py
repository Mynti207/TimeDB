
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '76A07D5CF52EC961ECD9BD05F62E0AC8'
    
_lr_action_items = {'OP_MUL':([13,],[19,]),'STRING':([8,12,14,15,16,17,19,21,22,24,26,27,29,30,34,36,37,38,39,41,42,43,44,45,49,50,51,52,53,55,57,],[12,-28,12,-9,-27,-26,12,12,12,12,12,-8,-30,12,-13,12,-21,12,-11,12,12,12,-29,-24,-12,-23,-20,-10,-22,-25,-19,]),'OUTPUT':([13,],[20,]),'LPAREN':([0,2,5,6,8,9,10,12,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,55,57,58,],[1,-5,-4,1,13,-2,-3,-28,13,-9,-27,-26,-6,13,31,13,13,31,13,13,-8,-7,-30,13,-15,31,-13,-17,13,-21,13,-11,31,13,13,13,-29,-24,-14,-12,-23,-20,-10,-22,-25,-19,-16,]),'RPAREN':([11,12,16,17,20,22,23,29,30,32,33,34,35,36,37,38,39,40,41,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[18,-28,-27,-26,34,37,39,-30,45,-15,49,-13,-17,50,-21,51,-11,52,53,55,-29,-24,-14,-12,-23,-20,-10,-22,57,-25,58,-19,-16,]),'OP_SUB':([13,],[21,]),'NUMBER':([8,12,14,15,16,17,19,21,22,24,26,27,29,30,34,36,37,38,39,41,42,43,44,45,49,50,51,52,53,55,57,],[16,-28,16,-9,-27,-26,16,16,16,16,16,-8,-30,16,-13,16,-21,16,-11,16,16,16,-29,-24,-12,-23,-20,-10,-22,-25,-19,]),'IMPORT':([1,],[7,]),'ASSIGN':([13,],[25,]),'$end':([2,4,5,6,9,10,18,28,],[-5,0,-4,-1,-2,-3,-6,-7,]),'ID':([3,7,8,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,],[8,11,17,-28,22,17,-9,-27,-26,17,35,17,17,35,17,42,17,-8,-30,17,47,-15,35,-13,-17,17,-21,17,-11,35,17,17,17,-29,-24,56,-18,-14,-12,-23,-20,-10,-22,-25,-19,-16,]),'RBRACE':([12,14,15,16,17,27,34,37,39,45,49,50,51,52,53,55,57,],[-28,28,-9,-27,-26,-8,-13,-21,-11,-24,-12,-23,-20,-10,-22,-25,-19,]),'INPUT':([13,],[23,]),'LBRACE':([0,2,5,6,9,10,18,28,],[3,-5,-4,3,-2,-3,-6,-7,]),'OP_ADD':([13,],[24,]),'OP_DIV':([13,],[26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'type':([31,],[46,]),'expression':([8,14,19,21,22,24,26,30,36,38,41,42,43,],[15,27,29,29,29,29,29,44,44,44,44,54,44,]),'declaration':([20,23,33,40,],[32,32,48,48,]),'declaration_list':([20,23,],[33,40,]),'component':([0,6,],[2,9,]),'expression_list':([8,],[14,]),'program':([0,],[4,]),'import_statement':([0,6,],[5,10,]),'statement_list':([0,],[6,]),'parameter_list':([19,21,22,24,26,],[30,36,38,41,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
