
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '674B03BF23F0780B988AC9F0B7D3EDAD'
    
_lr_action_items = {'OUTPUT':([13,],[19,]),'ASSIGN':([13,],[20,]),'ID':([3,7,8,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,57,58,],[8,11,12,-26,21,12,-9,-28,-27,30,34,12,30,12,12,12,12,-8,-13,-17,-15,30,47,12,-21,12,-30,-11,30,12,12,12,12,-12,-14,56,-18,-20,-29,-10,-25,-23,-22,-24,-19,-16,]),'RBRACE':([12,14,15,16,17,28,29,35,38,44,49,51,52,53,54,55,57,],[-26,27,-9,-28,-27,-8,-13,-21,-11,-12,-20,-10,-25,-23,-22,-24,-19,]),'LPAREN':([0,4,5,6,8,9,10,12,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,49,50,51,52,53,54,55,57,58,],[2,-4,-5,2,13,-3,-2,-26,13,-9,-28,-27,-6,33,13,33,13,13,13,13,-7,-8,-13,-17,-15,33,13,-21,13,-30,-11,33,13,13,13,13,-12,-14,-20,-29,-10,-25,-23,-22,-24,-19,-16,]),'LBRACE':([0,4,5,6,9,10,18,27,],[3,-4,-5,3,-3,-2,-6,-7,]),'OP_DIV':([13,],[23,]),'STRING':([8,12,14,15,16,17,21,23,24,25,26,28,29,34,35,36,37,38,40,41,42,43,44,49,50,51,52,53,54,55,57,],[16,-26,16,-9,-28,-27,16,16,16,16,16,-8,-13,16,-21,16,-30,-11,16,16,16,16,-12,-20,-29,-10,-25,-23,-22,-24,-19,]),'OP_ADD':([13,],[25,]),'RPAREN':([11,12,16,17,19,21,22,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[18,-26,-28,-27,29,35,38,-13,-17,-15,44,-21,49,-30,-11,51,52,53,54,55,-12,-14,57,-20,-29,-10,-25,-23,-22,-24,58,-19,-16,]),'IMPORT':([2,],[7,]),'INPUT':([13,],[22,]),'$end':([1,4,5,6,9,10,18,27,],[0,-4,-5,-1,-3,-2,-6,-7,]),'OP_MUL':([13,],[26,]),'OP_SUB':([13,],[24,]),'NUMBER':([8,12,14,15,16,17,21,23,24,25,26,28,29,34,35,36,37,38,40,41,42,43,44,49,50,51,52,53,54,55,57,],[17,-26,17,-9,-28,-27,17,17,17,17,17,-8,-13,17,-21,17,-30,-11,17,17,17,17,-12,-20,-29,-10,-25,-23,-22,-24,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration':([19,22,32,39,],[31,31,45,45,]),'parameter_list':([21,23,24,25,26,],[36,40,41,42,43,]),'type':([33,],[46,]),'declaration_list':([19,22,],[32,39,]),'import_statement':([0,6,],[4,9,]),'expression_list':([8,],[14,]),'component':([0,6,],[5,10,]),'statement_list':([0,],[6,]),'expression':([8,14,21,23,24,25,26,34,36,40,41,42,43,],[15,28,37,37,37,37,37,48,50,50,50,50,50,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
