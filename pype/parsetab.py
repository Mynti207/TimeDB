
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D1728DD5C674C28D5C94CF9231A47147'
    
_lr_action_items = {'ID':([6,7,10,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,],[10,11,12,-26,12,22,-28,-27,-9,-8,29,12,34,12,12,34,12,12,12,-21,-30,12,-15,-17,47,34,-11,12,12,34,-13,12,12,-20,-29,-18,57,-14,-10,-23,-24,-12,-22,-25,-19,-16,]),'ASSIGN':([14,],[21,]),'OP_ADD':([14,],[27,]),'IMPORT':([2,],[7,]),'LPAREN':([0,1,4,5,8,9,10,12,13,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,45,46,49,50,51,52,53,54,55,56,58,],[2,-5,2,-4,-2,-3,14,-26,14,-28,-27,-9,-6,-8,-7,14,35,14,14,35,14,14,14,-21,-30,14,-15,-17,35,-11,14,14,35,-13,14,14,-20,-29,-14,-10,-23,-24,-12,-22,-25,-19,-16,]),'RPAREN':([11,12,15,16,22,23,26,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,],[18,-26,-28,-27,30,37,41,-21,-30,45,-15,-17,50,-11,51,52,53,-13,54,55,56,-20,-29,-14,-10,-23,-24,-12,-22,-25,-19,58,-16,]),'STRING':([10,12,13,15,16,17,19,22,24,25,27,28,29,30,31,32,37,38,39,41,42,43,45,46,50,51,52,53,54,55,56,],[15,-26,15,-28,-27,-9,-8,15,15,15,15,15,15,-21,-30,15,-11,15,15,-13,15,15,-20,-29,-10,-23,-24,-12,-22,-25,-19,]),'OP_SUB':([14,],[24,]),'$end':([1,3,4,5,8,9,18,20,],[-5,0,-1,-4,-2,-3,-6,-7,]),'OP_MUL':([14,],[25,]),'RBRACE':([12,13,15,16,17,19,30,37,41,45,50,51,52,53,54,55,56,],[-26,20,-28,-27,-9,-8,-21,-11,-13,-20,-10,-23,-24,-12,-22,-25,-19,]),'OUTPUT':([14,],[26,]),'INPUT':([14,],[23,]),'NUMBER':([10,12,13,15,16,17,19,22,24,25,27,28,29,30,31,32,37,38,39,41,42,43,45,46,50,51,52,53,54,55,56,],[16,-26,16,-28,-27,-9,-8,16,16,16,16,16,16,-21,-30,16,-11,16,16,-13,16,16,-20,-29,-10,-23,-24,-12,-22,-25,-19,]),'LBRACE':([0,1,4,5,8,9,18,20,],[6,-5,6,-4,-2,-3,-6,-7,]),'OP_DIV':([14,],[28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([23,26,36,40,],[33,33,49,49,]),'component':([0,4,],[1,8,]),'expression_list':([10,],[13,]),'type':([35,],[48,]),'declaration_list':([23,26,],[36,40,]),'program':([0,],[3,]),'statement_list':([0,],[4,]),'parameter_list':([22,24,25,27,28,],[32,38,39,42,43,]),'expression':([10,13,22,24,25,27,28,29,32,38,39,42,43,],[17,19,31,31,31,31,31,44,46,46,46,46,46,]),'import_statement':([0,4,],[5,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
