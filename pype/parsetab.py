
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '6A65CD8BFBEB79DCE9C7C577BDAF4664'
    
_lr_action_items = {'IMPORT':([1,],[7,]),'RBRACE':([12,13,14,16,17,28,31,37,40,44,46,50,51,53,54,55,57,],[-27,-9,-28,-26,27,-8,-13,-21,-11,-22,-12,-25,-20,-10,-23,-24,-19,]),'OP_DIV':([15,],[21,]),'OP_ADD':([15,],[19,]),'OUTPUT':([15,],[20,]),'STRING':([8,12,13,14,16,17,19,21,22,25,26,28,29,30,31,36,37,38,39,40,42,43,44,45,46,50,51,53,54,55,57,],[14,-27,-9,-28,-26,14,14,14,14,14,14,-8,14,-30,-13,14,-21,14,14,-11,14,14,-22,-29,-12,-25,-20,-10,-23,-24,-19,]),'LPAREN':([0,3,4,5,8,9,10,12,13,14,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,50,51,53,54,55,57,58,],[1,-5,1,-4,15,-2,-3,-27,-9,-28,-26,15,-6,15,34,15,15,34,15,15,-7,-8,15,-30,-13,-15,34,-17,15,-21,15,15,-11,34,15,15,-22,-29,-12,-14,-25,-20,-10,-23,-24,-19,-16,]),'NUMBER':([8,12,13,14,16,17,19,21,22,25,26,28,29,30,31,36,37,38,39,40,42,43,44,45,46,50,51,53,54,55,57,],[12,-27,-9,-28,-26,12,12,12,12,12,12,-8,12,-30,-13,12,-21,12,12,-11,12,12,-22,-29,-12,-25,-20,-10,-23,-24,-19,]),'ID':([2,7,8,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,58,],[8,11,16,-27,-9,-28,22,-26,16,16,35,16,16,39,35,16,16,-8,16,-30,-13,-15,35,49,-17,16,-21,16,16,-11,35,16,16,-22,-29,-12,-14,56,-18,-25,-20,-10,-23,-24,-19,-16,]),'RPAREN':([11,12,14,16,20,22,24,29,30,31,32,33,35,36,37,38,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,],[18,-27,-28,-26,31,37,40,44,-30,-13,-15,46,-17,50,-21,51,-11,53,54,55,-22,-29,-12,-14,-25,-20,57,-10,-23,-24,58,-19,-16,]),'$end':([3,4,5,6,9,10,18,27,],[-5,-1,-4,0,-2,-3,-6,-7,]),'LBRACE':([0,3,4,5,9,10,18,27,],[2,-5,2,-4,-2,-3,-6,-7,]),'INPUT':([15,],[24,]),'ASSIGN':([15,],[23,]),'OP_SUB':([15,],[25,]),'OP_MUL':([15,],[26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([20,24,33,41,],[32,32,47,47,]),'parameter_list':([19,21,22,25,26,],[29,36,38,42,43,]),'component':([0,4,],[3,9,]),'expression':([8,17,19,21,22,25,26,29,36,38,39,42,43,],[13,28,30,30,30,30,30,45,45,45,52,45,45,]),'statement_list':([0,],[4,]),'import_statement':([0,4,],[5,10,]),'declaration_list':([20,24,],[33,41,]),'expression_list':([8,],[17,]),'program':([0,],[6,]),'type':([34,],[48,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
