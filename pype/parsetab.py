
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '1D0986CF548090149FF07FC136CB2C82'
    
_lr_action_items = {'ASSIGN':([11,],[18,]),'OUTPUT':([11,],[21,]),'LBRACE':([0,1,2,5,7,8,27,28,],[3,-4,3,-5,-3,-2,-7,-6,]),'ID':([3,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,],[9,15,17,24,-27,-28,-9,-26,15,29,15,15,35,15,15,15,35,-8,15,-30,15,15,-15,-13,-17,49,35,15,15,-21,15,-11,35,-29,-23,-25,57,-18,-14,-12,-24,-22,-20,-10,-19,-16,]),'IMPORT':([6,],[10,]),'STRING':([9,12,13,14,15,16,19,20,22,23,24,26,29,30,31,32,34,38,39,40,41,42,45,46,47,51,52,53,54,55,56,],[13,-27,-28,-9,-26,13,13,13,13,13,13,-8,13,-30,13,13,-13,13,13,-21,13,-11,-29,-23,-25,-12,-24,-22,-20,-10,-19,]),'OP_SUB':([11,],[19,]),'RBRACE':([12,13,14,15,16,26,34,40,42,46,47,51,52,53,54,55,56,],[-27,-28,-9,-26,27,-8,-13,-21,-11,-23,-25,-12,-24,-22,-20,-10,-19,]),'OP_DIV':([11,],[20,]),'INPUT':([11,],[25,]),'OP_MUL':([11,],[22,]),'RPAREN':([12,13,15,17,21,24,25,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,],[-27,-28,-26,28,34,40,42,-30,46,47,-15,-13,-17,51,52,53,-21,54,-11,55,56,-29,-23,-25,-14,-12,-24,-22,-20,-10,-19,58,-16,]),'$end':([1,2,4,5,7,8,27,28,],[-4,-1,0,-5,-3,-2,-7,-6,]),'OP_ADD':([11,],[23,]),'LPAREN':([0,1,2,5,7,8,9,12,13,14,15,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,45,46,47,50,51,52,53,54,55,56,58,],[6,-4,6,-5,-3,-2,11,-27,-28,-9,-26,11,11,11,36,11,11,11,36,-8,-7,-6,11,-30,11,11,-15,-13,-17,36,11,11,-21,11,-11,36,-29,-23,-25,-14,-12,-24,-22,-20,-10,-19,-16,]),'NUMBER':([9,12,13,14,15,16,19,20,22,23,24,26,29,30,31,32,34,38,39,40,41,42,45,46,47,51,52,53,54,55,56,],[12,-27,-28,-9,-26,12,12,12,12,12,12,-8,12,-30,12,12,-13,12,12,-21,12,-11,-29,-23,-25,-12,-24,-22,-20,-10,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'import_statement':([0,2,],[1,7,]),'statement_list':([0,],[2,]),'program':([0,],[4,]),'component':([0,2,],[5,8,]),'declaration':([21,25,37,43,],[33,33,50,50,]),'type':([36,],[48,]),'declaration_list':([21,25,],[37,43,]),'expression':([9,16,19,20,22,23,24,29,31,32,38,39,41,],[14,26,30,30,30,30,30,44,45,45,45,45,45,]),'expression_list':([9,],[16,]),'parameter_list':([19,20,22,23,24,],[31,32,38,39,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
