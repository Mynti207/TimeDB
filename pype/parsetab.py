
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D1728DD5C674C28D5C94CF9231A47147'
    
_lr_action_items = {'RBRACE':([11,12,13,14,15,19,34,41,43,45,46,47,51,53,54,55,57,],[-9,-28,18,-26,-27,-8,-11,-21,-13,-22,-25,-10,-23,-24,-20,-12,-19,]),'OP_ADD':([16,],[20,]),'$end':([1,2,4,6,9,10,18,28,],[-4,-5,0,-1,-3,-2,-7,-6,]),'LBRACE':([0,1,2,6,9,10,18,28,],[3,-4,-5,3,-3,-2,-7,-6,]),'OP_DIV':([16,],[21,]),'INPUT':([16,],[22,]),'IMPORT':([5,],[8,]),'OP_SUB':([16,],[23,]),'ASSIGN':([16,],[24,]),'OP_MUL':([16,],[25,]),'STRING':([7,11,12,13,14,15,19,20,21,23,25,26,29,30,31,34,37,38,39,40,41,43,44,45,46,47,51,53,54,55,57,],[12,-9,-28,12,-26,-27,-8,12,12,12,12,12,-30,12,12,-11,12,12,12,12,-21,-13,-29,-22,-25,-10,-23,-24,-20,-12,-19,]),'ID':([3,7,8,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,58,],[7,14,17,-9,-28,14,-26,-27,26,-8,14,14,33,14,38,14,14,33,-30,14,14,33,-17,-11,-15,50,14,14,14,14,-21,33,-13,-29,-22,-25,-10,-14,56,-18,-23,-24,-20,-12,-19,-16,]),'OUTPUT':([16,],[27,]),'RPAREN':([12,14,15,17,22,26,27,29,30,31,32,33,34,35,37,39,40,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,],[-28,-26,-27,28,34,41,43,-30,45,46,47,-17,-11,-15,51,53,54,-21,55,-13,-29,-22,-25,-10,-14,-23,57,-24,-20,-12,58,-19,-16,]),'NUMBER':([7,11,12,13,14,15,19,20,21,23,25,26,29,30,31,34,37,38,39,40,41,43,44,45,46,47,51,53,54,55,57,],[15,-9,-28,15,-26,-27,-8,15,15,15,15,15,-30,15,15,-11,15,15,15,15,-21,-13,-29,-22,-25,-10,-23,-24,-20,-12,-19,]),'LPAREN':([0,1,2,6,7,9,10,11,12,13,14,15,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,55,57,58,],[5,-4,-5,5,16,-3,-2,-9,-28,16,-26,-27,-7,-8,16,16,36,16,16,16,36,-6,-30,16,16,36,-17,-11,-15,16,16,16,16,-21,36,-13,-29,-22,-25,-10,-14,-23,-24,-20,-12,-19,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'import_statement':([0,6,],[1,9,]),'declaration_list':([22,27,],[32,42,]),'component':([0,6,],[2,10,]),'expression_list':([7,],[13,]),'parameter_list':([20,21,23,25,26,],[30,31,37,39,40,]),'declaration':([22,27,32,42,],[35,35,48,48,]),'program':([0,],[4,]),'expression':([7,13,20,21,23,25,26,30,31,37,38,39,40,],[11,19,29,29,29,29,29,44,44,44,52,44,44,]),'type':([36,],[49,]),'statement_list':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
