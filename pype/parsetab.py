
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '7B77CFC2E9574BE6AA62E56690011F66'
    
_lr_action_items = {'LBRACE':([0,3,4,6,9,10,19,28,],[1,-5,-4,1,-3,-2,-7,-6,]),'OP_ADD':([15,],[25,]),'ASSIGN':([15,],[24,]),'$end':([2,3,4,6,9,10,19,28,],[0,-5,-4,-1,-3,-2,-7,-6,]),'INPUT':([15,],[20,]),'RPAREN':([13,14,16,17,20,21,23,30,31,32,33,34,35,36,37,38,39,41,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,],[-26,-27,-28,28,32,35,38,47,-15,-11,-17,48,-13,-30,50,-21,51,53,54,55,-14,-10,-12,-29,-25,-20,57,-22,-23,-24,58,-19,-16,]),'OUTPUT':([15,],[21,]),'OP_DIV':([15,],[22,]),'STRING':([7,11,12,13,14,16,18,22,23,25,26,27,32,35,36,37,38,39,40,41,42,43,47,48,49,50,51,53,54,55,57,],[16,-9,16,-26,-27,-28,-8,16,16,16,16,16,-11,-13,-30,16,-21,16,16,16,16,16,-10,-12,-29,-25,-20,-22,-23,-24,-19,]),'ID':([1,7,8,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,58,],[7,13,17,-9,13,-26,-27,23,-28,-8,33,33,13,13,40,13,13,13,45,33,-15,-11,-17,33,-13,-30,13,-21,13,13,13,13,13,56,-18,-14,-10,-12,-29,-25,-20,-22,-23,-24,-19,-16,]),'RBRACE':([11,12,13,14,16,18,32,35,38,47,48,50,51,53,54,55,57,],[-9,19,-26,-27,-28,-8,-11,-13,-21,-10,-12,-25,-20,-22,-23,-24,-19,]),'NUMBER':([7,11,12,13,14,16,18,22,23,25,26,27,32,35,36,37,38,39,40,41,42,43,47,48,49,50,51,53,54,55,57,],[14,-9,14,-26,-27,-28,-8,14,14,14,14,14,-11,-13,-30,14,-21,14,14,14,14,14,-10,-12,-29,-25,-20,-22,-23,-24,-19,]),'OP_SUB':([15,],[26,]),'LPAREN':([0,3,4,6,7,9,10,11,12,13,14,16,18,19,20,21,22,23,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,49,50,51,53,54,55,57,58,],[5,-5,-4,5,15,-3,-2,-9,15,-26,-27,-28,-8,-7,29,29,15,15,15,15,15,-6,29,-15,-11,-17,29,-13,-30,15,-21,15,15,15,15,15,-14,-10,-12,-29,-25,-20,-22,-23,-24,-19,-16,]),'OP_MUL':([15,],[27,]),'IMPORT':([5,],[8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[2,]),'component':([0,6,],[3,10,]),'expression':([7,12,22,23,25,26,27,37,39,40,41,42,43,],[11,18,36,36,36,36,36,49,49,52,49,49,49,]),'declaration_list':([20,21,],[30,34,]),'import_statement':([0,6,],[4,9,]),'expression_list':([7,],[12,]),'statement_list':([0,],[6,]),'type':([29,],[44,]),'parameter_list':([22,23,25,26,27,],[37,39,41,42,43,]),'declaration':([20,21,30,34,],[31,31,46,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
