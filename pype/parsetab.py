
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '1D0986CF548090149FF07FC136CB2C82'
    
_lr_action_items = {'STRING':([7,11,13,14,15,16,19,20,22,24,25,27,31,34,35,36,37,38,39,41,42,43,44,48,49,50,52,53,54,55,57,],[16,-27,-9,-26,16,-28,16,16,16,16,16,-8,-11,-30,16,16,-21,16,16,-13,16,16,-10,-29,-23,-20,-24,-12,-25,-22,-19,]),'RBRACE':([11,13,14,15,16,27,31,37,41,44,49,50,52,53,54,55,57,],[-27,-9,-26,26,-28,-8,-11,-21,-13,-10,-23,-20,-24,-12,-25,-22,-19,]),'ASSIGN':([12,],[21,]),'OP_ADD':([12,],[25,]),'NUMBER':([7,11,13,14,15,16,19,20,22,24,25,27,31,34,35,36,37,38,39,41,42,43,44,48,49,50,52,53,54,55,57,],[11,-27,-9,-26,11,-28,11,11,11,11,11,-8,-11,-30,11,11,-21,11,11,-13,11,11,-10,-29,-23,-20,-24,-12,-25,-22,-19,]),'LPAREN':([0,3,5,6,7,9,10,11,13,14,15,16,18,19,20,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,52,53,54,55,57,58,],[2,-4,-5,2,12,-3,-2,-27,-9,-26,12,-28,33,12,12,12,33,12,12,-7,-8,-6,-17,33,-11,-15,-30,12,12,-21,12,12,33,-13,12,12,-10,-14,-29,-23,-20,-24,-12,-25,-22,-19,-16,]),'OP_SUB':([12,],[19,]),'INPUT':([12,],[18,]),'LBRACE':([0,3,5,6,9,10,26,28,],[1,-4,-5,1,-3,-2,-7,-6,]),'ID':([1,7,8,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,57,58,],[7,14,17,-27,20,-9,-26,14,-28,29,14,14,38,14,29,14,14,-8,-17,29,-11,-15,47,-30,14,14,-21,14,14,29,-13,14,14,-10,-14,56,-18,-29,-23,-20,-24,-12,-25,-22,-19,-16,]),'$end':([3,4,5,6,9,10,26,28,],[-4,0,-5,-1,-3,-2,-7,-6,]),'RPAREN':([11,14,16,17,18,20,23,29,30,31,32,34,35,36,37,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[-27,-26,-28,28,31,37,41,-17,44,-11,-15,-30,49,50,-21,52,53,-13,54,55,-10,-14,-29,-23,-20,57,-24,-12,-25,-22,58,-19,-16,]),'IMPORT':([2,],[8,]),'OP_MUL':([12,],[22,]),'OP_DIV':([12,],[24,]),'OUTPUT':([12,],[23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parameter_list':([19,20,22,24,25,],[35,36,39,42,43,]),'expression_list':([7,],[15,]),'type':([33,],[46,]),'import_statement':([0,6,],[3,9,]),'declaration':([18,23,30,40,],[32,32,45,45,]),'program':([0,],[4,]),'expression':([7,15,19,20,22,24,25,35,36,38,39,42,43,],[13,27,34,34,34,34,34,48,48,51,48,48,48,]),'component':([0,6,],[5,10,]),'statement_list':([0,],[6,]),'declaration_list':([18,23,],[30,40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
