
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '7B77CFC2E9574BE6AA62E56690011F66'
    
_lr_action_items = {'RBRACE':([12,13,14,15,16,27,31,38,41,45,50,51,52,53,54,55,57,],[-28,26,-9,-27,-26,-8,-11,-13,-21,-10,-22,-12,-23,-20,-25,-24,-19,]),'OP_SUB':([11,],[22,]),'$end':([1,2,4,6,7,8,26,28,],[-1,-4,0,-5,-3,-2,-7,-6,]),'LBRACE':([0,1,2,6,7,8,26,28,],[3,3,-4,-5,-3,-2,-7,-6,]),'INPUT':([11,],[18,]),'ASSIGN':([11,],[19,]),'ID':([3,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,57,58,],[9,16,17,23,-28,16,-9,-27,-26,33,34,16,33,16,16,16,16,-8,33,-15,-11,46,-17,16,16,-30,33,-13,16,16,-21,16,16,-14,-10,-18,56,-29,-22,-12,-23,-20,-25,-24,-19,-16,]),'OP_ADD':([11,],[20,]),'IMPORT':([5,],[10,]),'STRING':([9,12,13,14,15,16,20,22,23,24,25,27,31,34,35,36,38,39,40,41,42,43,45,49,50,51,52,53,54,55,57,],[12,-28,12,-9,-27,-26,12,12,12,12,12,-8,-11,12,12,-30,-13,12,12,-21,12,12,-10,-29,-22,-12,-23,-20,-25,-24,-19,]),'OUTPUT':([11,],[21,]),'RPAREN':([12,15,16,17,18,21,23,29,30,31,33,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[-28,-27,-26,28,31,38,41,45,-15,-11,-17,50,-30,51,-13,52,53,-21,54,55,-14,-10,57,-29,-22,-12,-23,-20,-25,-24,58,-19,-16,]),'NUMBER':([9,12,13,14,15,16,20,22,23,24,25,27,31,34,35,36,38,39,40,41,42,43,45,49,50,51,52,53,54,55,57,],[15,-28,15,-9,-27,-26,15,15,15,15,15,-8,-11,15,15,-30,-13,15,15,-21,15,15,-10,-29,-22,-12,-23,-20,-25,-24,-19,]),'OP_DIV':([11,],[24,]),'LPAREN':([0,1,2,6,7,8,9,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,49,50,51,52,53,54,55,57,58,],[5,5,-4,-5,-3,-2,11,-28,11,-9,-27,-26,32,11,32,11,11,11,11,-7,-8,-6,32,-15,-11,-17,11,11,-30,32,-13,11,11,-21,11,11,-14,-10,-29,-22,-12,-23,-20,-25,-24,-19,-16,]),'OP_MUL':([11,],[25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration_list':([18,21,],[29,37,]),'statement_list':([0,],[1,]),'import_statement':([0,1,],[2,7,]),'declaration':([18,21,29,37,],[30,30,44,44,]),'expression_list':([9,],[13,]),'parameter_list':([20,22,23,24,25,],[35,39,40,42,43,]),'expression':([9,13,20,22,23,24,25,34,35,39,40,42,43,],[14,27,36,36,36,36,36,48,49,49,49,49,49,]),'program':([0,],[4,]),'type':([32,],[47,]),'component':([0,1,],[6,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
