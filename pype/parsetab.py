
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '674B03BF23F0780B988AC9F0B7D3EDAD'
    
_lr_action_items = {'RPAREN':([12,15,16,17,20,23,26,29,30,32,33,34,35,36,37,38,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,],[-28,-27,-26,28,29,37,41,-11,44,-17,-15,-30,48,50,-13,51,52,53,-21,54,-10,-14,-24,-29,-25,-12,-22,-23,-20,57,58,-19,-16,]),'$end':([1,2,5,6,9,10,18,28,],[-5,-4,-1,0,-2,-3,-7,-6,]),'INPUT':([14,],[20,]),'OP_MUL':([14,],[21,]),'RBRACE':([11,12,13,15,16,19,29,37,41,44,48,50,51,52,53,54,57,],[18,-28,-9,-27,-26,-8,-11,-13,-21,-10,-24,-25,-12,-22,-23,-20,-19,]),'NUMBER':([7,11,12,13,15,16,19,21,22,24,25,26,29,34,35,36,37,39,40,41,42,43,44,48,49,50,51,52,53,54,57,],[15,15,-28,-9,-27,-26,-8,15,15,15,15,15,-11,-30,15,15,-13,15,15,-21,15,15,-10,-24,-29,-25,-12,-22,-23,-20,-19,]),'OUTPUT':([14,],[23,]),'IMPORT':([4,],[8,]),'ID':([3,7,8,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,],[7,16,17,16,-28,-9,26,-27,-26,-8,32,16,16,32,16,16,16,43,-11,32,47,-17,-15,-30,16,16,-13,32,16,16,-21,16,16,-10,-14,56,-18,-24,-29,-25,-12,-22,-23,-20,-19,-16,]),'OP_DIV':([14,],[22,]),'LBRACE':([0,1,2,5,9,10,18,28,],[3,-5,-4,3,-2,-3,-7,-6,]),'OP_ADD':([14,],[24,]),'STRING':([7,11,12,13,15,16,19,21,22,24,25,26,29,34,35,36,37,39,40,41,42,43,44,48,49,50,51,52,53,54,57,],[12,12,-28,-9,-27,-26,-8,12,12,12,12,12,-11,-30,12,12,-13,12,12,-21,12,12,-10,-24,-29,-25,-12,-22,-23,-20,-19,]),'OP_SUB':([14,],[25,]),'LPAREN':([0,1,2,5,7,9,10,11,12,13,15,16,18,19,20,21,22,23,24,25,26,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,57,58,],[4,-5,-4,4,14,-2,-3,14,-28,-9,-27,-26,-7,-8,31,14,14,31,14,14,14,-6,-11,31,-17,-15,-30,14,14,-13,31,14,14,-21,14,14,-10,-14,-24,-29,-25,-12,-22,-23,-20,-19,-16,]),'ASSIGN':([14,],[27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'component':([0,5,],[1,9,]),'expression_list':([7,],[11,]),'parameter_list':([21,22,24,25,26,],[35,36,39,40,42,]),'import_statement':([0,5,],[2,10,]),'expression':([7,11,21,22,24,25,26,35,36,39,40,42,43,],[13,19,34,34,34,34,34,49,49,49,49,49,55,]),'declaration_list':([20,23,],[30,38,]),'statement_list':([0,],[5,]),'program':([0,],[6,]),'type':([31,],[46,]),'declaration':([20,23,30,38,],[33,33,45,45,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
