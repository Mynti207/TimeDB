
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '7B77CFC2E9574BE6AA62E56690011F66'
    
_lr_action_items = {'LPAREN':([0,2,4,5,8,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,57,58,],[1,1,-5,-4,-2,-3,13,-26,-27,-28,13,-9,-6,13,13,33,33,13,13,13,-7,-8,13,-21,-30,13,-17,-13,33,-15,-11,33,13,13,13,13,-20,-29,-24,-12,-14,-10,-25,-23,-22,-19,-16,]),'ID':([3,7,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,],[10,11,12,-26,19,-27,-28,12,-9,12,12,34,34,12,12,12,43,-8,12,-21,-30,12,47,-17,-13,34,-15,-11,34,12,12,12,12,-20,-29,-24,-18,56,-12,-14,-10,-25,-23,-22,-19,-16,]),'OP_ADD':([13,],[25,]),'LBRACE':([0,2,4,5,8,9,18,27,],[3,3,-5,-4,-2,-3,-6,-7,]),'NUMBER':([10,12,14,15,16,17,19,20,23,24,25,28,29,30,31,32,35,38,40,41,42,43,44,45,46,49,51,52,53,54,57,],[14,-26,-27,-28,14,-9,14,14,14,14,14,-8,14,-21,-30,14,-13,-11,14,14,14,14,-20,-29,-24,-12,-10,-25,-23,-22,-19,]),'INPUT':([13,],[22,]),'OP_DIV':([13,],[23,]),'RBRACE':([12,14,15,16,17,28,30,35,38,44,46,49,51,52,53,54,57,],[-26,-27,-28,27,-9,-8,-21,-13,-11,-20,-24,-12,-10,-25,-23,-22,-19,]),'OP_SUB':([13,],[24,]),'STRING':([10,12,14,15,16,17,19,20,23,24,25,28,29,30,31,32,35,38,40,41,42,43,44,45,46,49,51,52,53,54,57,],[15,-26,-27,-28,15,-9,15,15,15,15,15,-8,15,-21,-30,15,-13,-11,15,15,15,15,-20,-29,-24,-12,-10,-25,-23,-22,-19,]),'$end':([2,4,5,6,8,9,18,27,],[-1,-5,-4,0,-2,-3,-6,-7,]),'ASSIGN':([13,],[26,]),'RPAREN':([11,12,14,15,19,21,22,29,30,31,32,34,35,36,37,38,39,40,41,42,44,45,46,49,50,51,52,53,54,55,56,57,58,],[18,-26,-27,-28,30,35,38,44,-21,-30,46,-17,-13,49,-15,-11,51,52,53,54,-20,-29,-24,-12,-14,-10,-25,-23,-22,57,58,-19,-16,]),'IMPORT':([1,],[7,]),'OUTPUT':([13,],[21,]),'OP_MUL':([13,],[20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parameter_list':([19,20,23,24,25,],[29,32,40,41,42,]),'expression_list':([10,],[16,]),'statement_list':([0,],[2,]),'declaration':([21,22,36,39,],[37,37,50,50,]),'expression':([10,16,19,20,23,24,25,29,32,40,41,42,43,],[17,28,31,31,31,31,31,45,45,45,45,45,55,]),'type':([33,],[48,]),'component':([0,2,],[4,8,]),'declaration_list':([21,22,],[36,39,]),'import_statement':([0,2,],[5,9,]),'program':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',26),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',29),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',38),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',43),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',49),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',50),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',59),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',68),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',69),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',77),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',78),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',87),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',88),
  ('type -> ID','type',1,'p_type','parser.py',97),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',103),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',108),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',109),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',118),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',125),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',132),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',139),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',150),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',155),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',160),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',161),
]
