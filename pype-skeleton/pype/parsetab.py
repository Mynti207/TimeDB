
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'C363AAE7E5BB8BBE4EB5A08CA98ADDFE'
    
_lr_action_items = {'LPAREN':([0,1,4,6,8,9,10,12,13,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,45,46,49,50,51,52,53,54,55,56,58,],[2,-4,2,-5,14,-3,-2,14,-28,-26,-27,-9,-6,-7,-8,14,32,14,32,14,14,14,14,14,-30,-15,-17,32,-11,14,-13,32,14,14,-21,14,-23,-29,-14,-10,-24,-12,-25,-20,-22,-19,-16,]),'ASSIGN':([14,],[21,]),'OP_SUB':([14,],[22,]),'ID':([3,7,8,12,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,],[8,11,15,15,-28,27,-26,-27,-9,-8,29,15,34,15,34,15,15,15,15,15,-30,48,-15,-17,34,-11,15,-13,34,15,15,-21,15,-23,-29,57,-18,-14,-10,-24,-12,-25,-20,-22,-19,-16,]),'STRING':([8,12,13,15,16,17,20,22,24,26,27,28,29,30,31,36,37,38,40,41,42,43,45,46,50,51,52,53,54,55,56,],[13,13,-28,-26,-27,-9,-8,13,13,13,13,13,13,13,-30,-11,13,-13,13,13,-21,13,-23,-29,-10,-24,-12,-25,-20,-22,-19,]),'OP_MUL':([14,],[24,]),'NUMBER':([8,12,13,15,16,17,20,22,24,26,27,28,29,30,31,36,37,38,40,41,42,43,45,46,50,51,52,53,54,55,56,],[16,16,-28,-26,-27,-9,-8,16,16,16,16,16,16,16,-30,-11,16,-13,16,16,-21,16,-23,-29,-10,-24,-12,-25,-20,-22,-19,]),'$end':([1,4,5,6,9,10,18,19,],[-4,-1,0,-5,-3,-2,-6,-7,]),'IMPORT':([2,],[7,]),'OUTPUT':([14,],[25,]),'LBRACE':([0,1,4,6,9,10,18,19,],[3,-4,3,-5,-3,-2,-6,-7,]),'OP_DIV':([14,],[26,]),'RPAREN':([11,13,15,16,23,25,27,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,],[18,-28,-26,-27,36,38,42,45,-30,-15,-17,50,-11,51,-13,52,53,54,-21,55,56,-23,-29,-14,-10,-24,-12,-25,-20,-22,-19,58,-16,]),'RBRACE':([12,13,15,16,17,20,36,38,42,45,50,51,52,53,54,55,56,],[19,-28,-26,-27,-9,-8,-11,-13,-21,-23,-10,-24,-12,-25,-20,-22,-19,]),'OP_ADD':([14,],[28,]),'INPUT':([14,],[23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'import_statement':([0,4,],[1,9,]),'expression_list':([8,],[12,]),'declaration':([23,25,35,39,],[33,33,49,49,]),'statement_list':([0,],[4,]),'parameter_list':([22,24,26,27,28,],[30,37,40,41,43,]),'program':([0,],[5,]),'declaration_list':([23,25,],[35,39,]),'expression':([8,12,22,24,26,27,28,29,30,37,40,41,43,],[17,20,31,31,31,31,31,44,46,46,46,46,46,]),'type':([32,],[47,]),'component':([0,4,],[6,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',9),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',15),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',16),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',17),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',18),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',30),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',35),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',41),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',42),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputexpression','parser.py',51),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputexpression','parser.py',52),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputexpression','parser.py',60),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputexpression','parser.py',61),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',69),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',70),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',79),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',80),
  ('type -> ID','type',1,'p_type','parser.py',89),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',95),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_id_parens','parser.py',100),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_id_parens','parser.py',101),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_expression_plus','parser.py',109),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_expression_minus','parser.py',114),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_expression_mult','parser.py',119),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_expression_div','parser.py',124),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',129),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',134),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',139),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',144),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',145),
]
